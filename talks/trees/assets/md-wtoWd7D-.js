import{o as l,c as s,k as o,e,B as i,q as c,s as u,C as r}from"./modules/vue-D4kSXDOz.js";import{I as h}from"./slidev/default-CLu9l1LE.js";import{u as f,f as m}from"./slidev/context-DW6H7Lwp.js";import"./index-BdBL47cZ.js";import"./modules/shiki-CQ9Joarf.js";const B={__name:"slides.md__slidev_16",setup(p){const{$slidev:d,$nav:y,$clicksContext:a,$clicks:_,$page:k,$renderContext:q,$frontmatter:n}=f();return a.setup(),(g,t)=>(l(),s(h,c(u(r(m)(r(n),15))),{default:o(()=>t[0]||(t[0]=[e("h1",null,"Task",-1),e("h2",null,"Implement a Huffman Tree",-1),e("p",null,"This is the tree that forms the backend of the Huffman compression algorithm",-1),e("p",null,"Building the tree:",-1),e("ul",null,[e("li",null,"Calculate the frequency of characters in a string (iterate over the loop and count how many times each character appears)"),e("li",null,"Sort the characters by frequency, least frequent first."),e("li",null,[i("Place the two least common characters into a binary tree along with their frequency "),e("ul",null,[e("li",null,"Each character and its frequency forms a child node, the parent holds the combined frequency (but no character)"),e("li",null,'Insert the parent "frequency" back into the list of characters'),e("li",null,"Repeat until there is a single entry left in the sorted list - this is our huffman tree")])])],-1)])),_:1},16))}};export{B as default};
